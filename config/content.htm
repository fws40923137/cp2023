<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite </a></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<h1>ANSIC</h1>
<p>1- 顯示前十個自然數</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

int main() {
int i;

// 打印一條顯示程式意圖的消息
printf("前10個自然數是：\n");

// 循環遍歷前10個自然數並打印每個數字
for (i = 1; i &lt;= 10; i++) {
printf("%d ", i); // 打印當前數字
}

// 返回0以表示成功執行
return 0;
}

</pre>
<p>2- <span>計算前 10 個自然數的和</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

int main() {
int j, sum = 0; // 宣告整數變量j和sum，並初始化sum為0。

printf("前10個自然數是 :\n");

// 進行迴圈，從1到10，計算總和，並打印每個數字
for (j = 1; j &lt;= 10; j++) {
sum = sum + j; // 將當前數字加到總和中
printf("%d ", j); // 打印當前數字
}

printf("\n總和為 : %d\n", sum); // 打印總和

// 返回0以表示成功執行
return 0;
}</pre>
<p>3- <span>顯示整數的立方</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

int main() {
int i, ctr; // 宣告變量 'i' 作為循環計數器和 'ctr' 作為用戶輸入。

printf("輸入項目的數量 : "); // 打印消息以提示用戶輸入。
scanf("%d", &amp;ctr); // 從用戶讀取 'ctr' 的值。

for (i = 1; i &lt;= ctr; i++) { // 開始一個循環，遍歷 'ctr' 次。
printf("數字是 : %d，%d 的立方是 : %d \n", i, i, (i * i * i)); // 打印數字、其立方和相應的消息。
}

return 0; // 返回0以表示成功執行。
}</pre>
<p>4- <span>讀取任意月份的整數並顯示該月的天數</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

void main() {
int monno; // 宣告一個整數變量 'monno' 用於存儲月份編號。
char monnm[15]; // 宣告一個字符數組 'monnm' 用於存儲月份名稱。

printf("輸入月份編號 : "); // 打印消息以提示用戶輸入月份編號。
scanf("%d", &amp;monno); // 從用戶讀取月份編號的值。

switch (monno) { // 使用 switch 语句根据月份編號執行相應的代碼塊。
case 1:
case 3:
case 5:
case 7:
case 8:
case 10:
case 12:
printf("該月有31天。 \n");
break;
case 2:
printf("第2個月是二月，有28天。 \n");
printf("在閏年中，二月有29天。\n");
break;
case 4:
case 6:
case 9:
case 11:
printf("該月有30天。 \n");
break;
default:
printf("無效的月份編號。\n請重試....\n");
break;
}
}</pre>
<p>5- <span>接受兩個整數並檢查它們是否相等</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

void main() {
int int1, int2; // 宣告兩個整數變量 'int1' 和 'int2'。

printf("輸入Number1和Number2的值 : "); // 打印消息以提示用戶輸入Number1和Number2的值。
scanf("%d %d", &amp;int1, &amp;int2); // 從用戶讀取Number1和Number2的值。

if (int1 == int2) {
printf("Number1和Number2相等\n"); // 如果Number1等於Number2，則打印相等的消息。
} else {
printf("Number1和Number2不相等\n"); // 如果Number1不等於Number2，則打印不相等的消息。
}
}

</pre>
<p>6- 檢查給定的數字是偶數還是奇數</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

void main() {
int num1, rem1; // 宣告兩個整數變量 'num1' 和 'rem1'。

printf("輸入一個整數 : "); // 打印消息以提示用戶輸入一個整數。
scanf("%d", &amp;num1); // 從用戶讀取整數的值。

rem1 = num1 % 2; // 使用取餘運算符計算 'num1' 除以2的餘數，存儲在 'rem1' 中。

if (rem1 == 0) {
printf("%d 是一個偶數\n", num1); // 如果 'rem1' 等於0，則 'num1' 是偶數，打印相應的消息。
} else {
printf("%d 是一個奇數\n", num1); // 如果 'rem1' 不等於0，則 'num1' 是奇數，打印相應的消息。
}
}</pre>
<p>7- <span>檢查給定的數字是正數還是負數</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

void main() {
int num; // 宣告一個整數變量 'num'。

printf("輸入一個數字 :"); // 打印消息以提示用戶輸入一個數字。
scanf("%d", &amp;num); // 從用戶讀取數字的值。

if (num &gt;= 0) {
printf("%d 是一個正數 \n", num); // 如果 'num' 大於或等於0，則 'num' 是正數，打印相應的消息。
} else {
printf("%d 是一個負數 \n", num); // 如果 'num' 小於0，則 'num' 是負數，打印相應的消息。
}
}

</pre>
<p><br/>8- <span>將攝氏度轉換為華氏度</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

float temp_f; /* 華氏溫度 */
float temp_c; /* 攝氏溫度 */
char line_text[50]; /* 一行輸入 */

int main() {
printf("輸入溫度（攝氏度）: "); // 提示用戶輸入攝氏溫度。
fgets(line_text, sizeof(line_text), stdin); // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
sscanf(line_text, "%f", &amp;temp_c); // 將 'line_text' 中的輸入轉換為浮點數，並將其存儲在 'temp_c' 中。

temp_f = ((9.0 / 5.0) * temp_c) + 32.0; // 將溫度從攝氏度轉換為華氏度，並將其存儲在 'temp_f' 中。
printf("%f degrees Fahrenheit.\n", temp_f); // 打印以華氏度表示的溫度。

return 0; // 返回0以表示程序成功執行。
}</pre>
<p>9- <span>將公里每小時轉換為英哩每小時</span><br/><br/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

float kmph; /* 每小時公里數 */
float miph; /* 每小時英里數（將被計算） */
char line_text[50]; /* 鍵盤輸入的一行文字 */

int main()
{
printf("輸入每小時公里數: "); // 提示用戶輸入每小時公里數。
fgets(line_text, sizeof(line_text), stdin); // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
sscanf(line_text, "%f", &amp;kmph); // 將輸入轉換為浮點數，並將其存儲在 'kmph' 中。

miph = (kmph * 0.6213712); // 將每小時公里數轉換為每小時英里數。
printf("%f 英里每小時\n", miph); // 以每小時英里數的形式打印結果。

return 0; // 返回0以表示程序成功執行。
}</pre>
<p>10- 輸入<span>小時和分鐘數，計算總分鐘數</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

int hrs; /* 給定的小時數 */
int mins; /* 給定的分鐘數 */
int tot_mins; /* 總分鐘數（將被計算） */

const int MINaHOUR = 60; /* 一小時的分鐘數 */

char line_text[50]; /* 鍵盤輸入的一行文字 */

int main() {
printf("輸入小時: "); // 提示用戶輸入小時。
fgets(line_text, sizeof(line_text), stdin); // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
sscanf(line_text, "%d", &amp;hrs); // 將輸入轉換為整數，並將其存儲在 'hrs' 中。

printf("輸入分鐘: "); // 提示用戶輸入分鐘。
fgets(line_text, sizeof(line_text), stdin); // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
sscanf(line_text, "%d", &amp;mins); // 將輸入轉換為整數，並將其存儲在 'mins' 中。

tot_mins = mins + (hrs * MINaHOUR); // 計算總分鐘數。

printf("總共: %d 分鐘。\n", tot_mins); // 打印總分鐘數。

return 0; // 返回0以表示程序成功執行。
}</pre>
<p><br/><br/></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h1>w5</h1>
<div>
<div class="syntaxhighlighter cpp" id="highlighter_564769">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
<div class="line number50 index49 alt1">50</div>
<div class="line number51 index50 alt2">51</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></div>
<div class="line number2 index1 alt1"> </div>
<div class="line number3 index2 alt2"><code class="cpp color1 bold">int</code> <code class="cpp plain">main() {</code></div>
<div class="line number4 index3 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// Open a file to write displacement and velocity data</code></div>
<div class="line number5 index4 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">FILE</code> <code class="cpp plain">*outputFile = </code><code class="cpp functions bold">fopen</code><code class="cpp plain">(</code><code class="cpp string">"motion_data.txt"</code><code class="cpp plain">, </code><code class="cpp string">"w"</code><code class="cpp plain">);</code></div>
<div class="line number6 index5 alt1"><code class="cpp spaces">    </code><code class="cpp keyword bold">if</code> <code class="cpp plain">(!outputFile) {</code></div>
<div class="line number7 index6 alt2"><code class="cpp spaces">        </code><code class="cpp functions bold">fprintf</code><code class="cpp plain">(stderr, </code><code class="cpp string">"Failed to create data file.\n"</code><code class="cpp plain">);</code></div>
<div class="line number8 index7 alt1"><code class="cpp spaces">        </code><code class="cpp keyword bold">return</code> <code class="cpp plain">1;</code></div>
<div class="line number9 index8 alt2"><code class="cpp spaces">    </code><code class="cpp plain">}</code></div>
<div class="line number10 index9 alt1"> </div>
<div class="line number11 index10 alt2"><code class="cpp spaces">    </code><code class="cpp comments">// Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file</code></div>
<div class="line number12 index11 alt1"><code class="cpp spaces">    </code><code class="cpp color1 bold">double</code> <code class="cpp plain">x = 0.2;  </code><code class="cpp comments">// Initial displacement</code></div>
<div class="line number13 index12 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">double</code> <code class="cpp plain">v = 0.0;  </code><code class="cpp comments">// Initial velocity</code></div>
<div class="line number14 index13 alt1"><code class="cpp spaces">    </code><code class="cpp color1 bold">double</code> <code class="cpp plain">dt = 0.01; </code><code class="cpp comments">// Time step</code></div>
<div class="line number15 index14 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">double</code> <code class="cpp plain">t = 0.0;  </code><code class="cpp comments">// Time</code></div>
<div class="line number16 index15 alt1"> </div>
<div class="line number17 index16 alt2"><code class="cpp spaces">    </code><code class="cpp keyword bold">while</code> <code class="cpp plain">(t &lt;= 10.0) {</code></div>
<div class="line number18 index17 alt1"><code class="cpp spaces">        </code><code class="cpp color1 bold">double</code> <code class="cpp plain">acceleration = (-10.0 * x - 0.5 * v) / 1.0; </code><code class="cpp comments">// Modified system parameters here</code></div>
<div class="line number19 index18 alt2"><code class="cpp spaces">        </code><code class="cpp plain">v += acceleration * dt;</code></div>
<div class="line number20 index19 alt1"><code class="cpp spaces">        </code><code class="cpp plain">x += v * dt;</code></div>
<div class="line number21 index20 alt2"> </div>
<div class="line number22 index21 alt1"><code class="cpp spaces">        </code><code class="cpp functions bold">fprintf</code><code class="cpp plain">(outputFile, </code><code class="cpp string">"%lf %lf %lf\n"</code><code class="cpp plain">, t, x, v);</code></div>
<div class="line number23 index22 alt2"> </div>
<div class="line number24 index23 alt1"><code class="cpp spaces">        </code><code class="cpp plain">t += dt;</code></div>
<div class="line number25 index24 alt2"><code class="cpp spaces">    </code><code class="cpp plain">}</code></div>
<div class="line number26 index25 alt1"> </div>
<div class="line number27 index26 alt2"><code class="cpp spaces">    </code><code class="cpp comments">// Close the data file</code></div>
<div class="line number28 index27 alt1"><code class="cpp spaces">    </code><code class="cpp functions bold">fclose</code><code class="cpp plain">(outputFile);</code></div>
<div class="line number29 index28 alt2"> </div>
<div class="line number30 index29 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// Start a Gnuplot process using popen</code></div>
<div class="line number31 index30 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">FILE</code> <code class="cpp plain">*gnuplotPipe = popen(</code><code class="cpp string">"gnuplot -persistent"</code><code class="cpp plain">, </code><code class="cpp string">"w"</code><code class="cpp plain">);</code></div>
<div class="line number32 index31 alt1"><code class="cpp spaces">    </code><code class="cpp keyword bold">if</code> <code class="cpp plain">(!gnuplotPipe) {</code></div>
<div class="line number33 index32 alt2"><code class="cpp spaces">        </code><code class="cpp functions bold">fprintf</code><code class="cpp plain">(stderr, </code><code class="cpp string">"Failed to start Gnuplot.\n"</code><code class="cpp plain">);</code></div>
<div class="line number34 index33 alt1"><code class="cpp spaces">        </code><code class="cpp keyword bold">return</code> <code class="cpp plain">1;</code></div>
<div class="line number35 index34 alt2"><code class="cpp spaces">    </code><code class="cpp plain">}</code></div>
<div class="line number36 index35 alt1"> </div>
<div class="line number37 index36 alt2"><code class="cpp spaces">    </code><code class="cpp comments">// Use Gnuplot plotting commands, specify font and output as PNG</code></div>
<div class="line number38 index37 alt1"><code class="cpp spaces">    </code><code class="cpp functions bold">fprintf</code><code class="cpp plain">(gnuplotPipe, </code><code class="cpp string">"set terminal pngcairo enhanced font 'default,10' size 800,400\n"</code><code class="cpp plain">);</code></div>
<div class="line number39 index38 alt2"><code class="cpp spaces">    </code><code class="cpp functions bold">fprintf</code><code class="cpp plain">(gnuplotPipe, </code><code class="cpp string">"set output 'motion_plot.png'\n"</code><code class="cpp plain">);</code></div>
<div class="line number40 index39 alt1"><code class="cpp spaces">    </code><code class="cpp functions bold">fprintf</code><code class="cpp plain">(gnuplotPipe, </code><code class="cpp string">"set title 'Displacement and Velocity vs. Time'\n"</code><code class="cpp plain">);</code></div>
<div class="line number41 index40 alt2"><code class="cpp spaces">    </code><code class="cpp functions bold">fprintf</code><code class="cpp plain">(gnuplotPipe, </code><code class="cpp string">"set xlabel 'Time (s)'\n"</code><code class="cpp plain">);</code></div>
<div class="line number42 index41 alt1"><code class="cpp spaces">    </code><code class="cpp functions bold">fprintf</code><code class="cpp plain">(gnuplotPipe, </code><code class="cpp string">"set ylabel 'Displacement (m)'\n"</code><code class="cpp plain">);</code></div>
<div class="line number43 index42 alt2"><code class="cpp spaces">    </code><code class="cpp functions bold">fprintf</code><code class="cpp plain">(gnuplotPipe, "plot </code><code class="cpp string">'motion_data.txt'</code> <code class="cpp keyword bold">using</code> <code class="cpp plain">1:2 with lines lw 2 title </code><code class="cpp string">'Displacement'</code><code class="cpp plain">, \</code></div>
<div class="line number44 index43 alt1"><code class="cpp spaces">                             </code><code class="cpp string">'motion_data.txt'</code> <code class="cpp keyword bold">using</code> <code class="cpp plain">1:3 with lines lw 2 title </code><code class="cpp string">'Velocity'</code><code class="cpp plain">\n");</code></div>
<div class="line number45 index44 alt2"> </div>
<div class="line number46 index45 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// Close the Gnuplot process</code></div>
<div class="line number47 index46 alt2"><code class="cpp spaces">    </code><code class="cpp functions bold">fprintf</code><code class="cpp plain">(gnuplotPipe, </code><code class="cpp string">"exit\n"</code><code class="cpp plain">);</code></div>
<div class="line number48 index47 alt1"><code class="cpp spaces">    </code><code class="cpp plain">pclose(gnuplotPipe);</code></div>
<div class="line number49 index48 alt2"> </div>
<div class="line number50 index49 alt1"><code class="cpp spaces">    </code><code class="cpp keyword bold">return</code> <code class="cpp plain">0;</code></div>
<div class="line number51 index50 alt2"><code class="cpp plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>clear</p>
<p>cd downloads</p>
<p>cc gnuplot_ex1.c</p>
<p>./a.out</p>
<p></p>
<p><img alt="" height="200" src="https://41223110.github.io/cp2023/images/motion_plot.png" width="400"/></p>
<h1>w6</h1>
<div>
<div class="syntaxhighlighter cpp" id="highlighter_749846">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
<div class="line number50 index49 alt1">50</div>
<div class="line number51 index50 alt2">51</div>
<div class="line number52 index51 alt1">52</div>
<div class="line number53 index52 alt2">53</div>
<div class="line number54 index53 alt1">54</div>
<div class="line number55 index54 alt2">55</div>
<div class="line number56 index55 alt1">56</div>
<div class="line number57 index56 alt2">57</div>
<div class="line number58 index57 alt1">58</div>
<div class="line number59 index58 alt2">59</div>
<div class="line number60 index59 alt1">60</div>
<div class="line number61 index60 alt2">61</div>
<div class="line number62 index61 alt1">62</div>
<div class="line number63 index62 alt2">63</div>
<div class="line number64 index63 alt1">64</div>
<div class="line number65 index64 alt2">65</div>
<div class="line number66 index65 alt1">66</div>
<div class="line number67 index66 alt2">67</div>
<div class="line number68 index67 alt1">68</div>
<div class="line number69 index68 alt2">69</div>
<div class="line number70 index69 alt1">70</div>
<div class="line number71 index70 alt2">71</div>
<div class="line number72 index71 alt1">72</div>
<div class="line number73 index72 alt2">73</div>
<div class="line number74 index73 alt1">74</div>
<div class="line number75 index74 alt2">75</div>
<div class="line number76 index75 alt1">76</div>
<div class="line number77 index76 alt2">77</div>
<div class="line number78 index77 alt1">78</div>
<div class="line number79 index78 alt2">79</div>
<div class="line number80 index79 alt1">80</div>
<div class="line number81 index80 alt2">81</div>
<div class="line number82 index81 alt1">82</div>
<div class="line number83 index82 alt2">83</div>
<div class="line number84 index83 alt1">84</div>
<div class="line number85 index84 alt2">85</div>
<div class="line number86 index85 alt1">86</div>
<div class="line number87 index86 alt2">87</div>
<div class="line number88 index87 alt1">88</div>
<div class="line number89 index88 alt2">89</div>
<div class="line number90 index89 alt1">90</div>
<div class="line number91 index90 alt2">91</div>
<div class="line number92 index91 alt1">92</div>
<div class="line number93 index92 alt2">93</div>
<div class="line number94 index93 alt1">94</div>
<div class="line number95 index94 alt2">95</div>
<div class="line number96 index95 alt1">96</div>
<div class="line number97 index96 alt2">97</div>
<div class="line number98 index97 alt1">98</div>
<div class="line number99 index98 alt2">99</div>
<div class="line number100 index99 alt1">100</div>
<div class="line number101 index100 alt2">101</div>
<div class="line number102 index101 alt1">102</div>
<div class="line number103 index102 alt2">103</div>
<div class="line number104 index103 alt1">104</div>
<div class="line number105 index104 alt2">105</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="cpp comments">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China</code></div>
<div class="line number2 index1 alt1"><code class="cpp comments">// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621</code></div>
<div class="line number3 index2 alt2"><code class="cpp comments">// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library</code></div>
<div class="line number4 index3 alt1"><code class="cpp comments">// https://www.rapidtables.com/web/color/RGB_Color.html</code></div>
<div class="line number5 index4 alt2"><code class="cpp comments">// 幾何形狀著色與繪圖練習</code></div>
<div class="line number6 index5 alt1"><code class="cpp comments">// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖</code></div>
<div class="line number7 index6 alt2"><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></div>
<div class="line number8 index7 alt1"><code class="cpp preprocessor">#include &lt;gd.h&gt;</code></div>
<div class="line number9 index8 alt2"><code class="cpp preprocessor">#include &lt;math.h&gt;</code></div>
<div class="line number10 index9 alt1"> </div>
<div class="line number11 index10 alt2"><code class="cpp keyword bold">void</code> <code class="cpp plain">draw_roc_flag(gdImagePtr img);</code></div>
<div class="line number12 index11 alt1"><code class="cpp keyword bold">void</code> <code class="cpp plain">draw_white_sun(gdImagePtr img, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">x, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">y, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">size, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">color);</code></div>
<div class="line number13 index12 alt2"> </div>
<div class="line number14 index13 alt1"><code class="cpp color1 bold">int</code> <code class="cpp plain">main() {</code></div>
<div class="line number15 index14 alt2"><code class="cpp spaces">    </code><code class="cpp comments">// width 3: height 2</code></div>
<div class="line number16 index15 alt1"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">width = 1200;</code></div>
<div class="line number17 index16 alt2"><code class="cpp spaces">    </code><code class="cpp comments">// 國旗長寬比為 3:2</code></div>
<div class="line number18 index17 alt1"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">height = (</code><code class="cpp color1 bold">int</code><code class="cpp plain">)(width*2.0 / 3.0);</code></div>
<div class="line number19 index18 alt2"> </div>
<div class="line number20 index19 alt1"><code class="cpp spaces">    </code><code class="cpp plain">gdImagePtr img = gdImageCreateTrueColor(width, height);</code></div>
<div class="line number21 index20 alt2"><code class="cpp spaces">    </code><code class="cpp plain">gdImageAlphaBlending(img, 0);</code></div>
<div class="line number22 index21 alt1"> </div>
<div class="line number23 index22 alt2"><code class="cpp spaces">    </code><code class="cpp plain">draw_roc_flag(img);</code></div>
<div class="line number24 index23 alt1"> </div>
<div class="line number25 index24 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">FILE</code> <code class="cpp plain">*outputFile = </code><code class="cpp functions bold">fopen</code><code class="cpp plain">(</code><code class="cpp string">"./../images/roc_flag_in_gd.png"</code><code class="cpp plain">, </code><code class="cpp string">"wb"</code><code class="cpp plain">);</code></div>
<div class="line number26 index25 alt1"><code class="cpp spaces">    </code><code class="cpp keyword bold">if</code> <code class="cpp plain">(outputFile == NULL) {</code></div>
<div class="line number27 index26 alt2"><code class="cpp spaces">        </code><code class="cpp functions bold">fprintf</code><code class="cpp plain">(stderr, </code><code class="cpp string">"Error opening the output file.\n"</code><code class="cpp plain">);</code></div>
<div class="line number28 index27 alt1"><code class="cpp spaces">        </code><code class="cpp keyword bold">return</code> <code class="cpp plain">1;</code></div>
<div class="line number29 index28 alt2"><code class="cpp spaces">    </code><code class="cpp plain">}</code></div>
<div class="line number30 index29 alt1"><code class="cpp spaces">    </code><code class="cpp plain">gdImagePngEx(img, outputFile, 9);</code></div>
<div class="line number31 index30 alt2"><code class="cpp spaces">    </code><code class="cpp functions bold">fclose</code><code class="cpp plain">(outputFile);</code></div>
<div class="line number32 index31 alt1"><code class="cpp spaces">    </code><code class="cpp plain">gdImageDestroy(img);</code></div>
<div class="line number33 index32 alt2"><code class="cpp spaces">    </code><code class="cpp keyword bold">return</code> <code class="cpp plain">0;</code></div>
<div class="line number34 index33 alt1"><code class="cpp plain">}</code></div>
<div class="line number35 index34 alt2"> </div>
<div class="line number36 index35 alt1"><code class="cpp keyword bold">void</code> <code class="cpp plain">draw_roc_flag(gdImagePtr img) {</code></div>
<div class="line number37 index36 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">width = gdImageSX(img);</code></div>
<div class="line number38 index37 alt1"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">height = gdImageSY(img);</code></div>
<div class="line number39 index38 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">red, white, blue;</code></div>
<div class="line number40 index39 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處</code></div>
<div class="line number41 index40 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">center_x = (</code><code class="cpp color1 bold">int</code><code class="cpp plain">)(width/4);</code></div>
<div class="line number42 index41 alt1"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">center_y = (</code><code class="cpp color1 bold">int</code><code class="cpp plain">)(height/4);</code></div>
<div class="line number43 index42 alt2"><code class="cpp spaces">    </code><code class="cpp comments">// gdImageFilledEllipse 需以長寬方向的 diameter 作圖</code></div>
<div class="line number44 index43 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 由於中央白日圓形的半徑為青天寬度的 1/8</code></div>
<div class="line number45 index44 alt2"><code class="cpp spaces">    </code><code class="cpp comments">// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8</code></div>
<div class="line number46 index45 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8</code></div>
<div class="line number47 index46 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">sun_radius = (</code><code class="cpp color1 bold">int</code><code class="cpp plain">)(width/8);</code></div>
<div class="line number48 index47 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑</code></div>
<div class="line number49 index48 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">white_circle_dia = sun_radius;</code></div>
<div class="line number50 index49 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 中央藍色圓形半徑為中央白日的 1又 2/15</code></div>
<div class="line number51 index50 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;</code></div>
<div class="line number52 index51 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值</code></div>
<div class="line number53 index52 alt2"><code class="cpp spaces">    </code><code class="cpp plain">red = gdImageColorAllocate(img, 255, 0, 0); </code><code class="cpp comments">// 紅色</code></div>
<div class="line number54 index53 alt1"><code class="cpp spaces">    </code><code class="cpp plain">white = gdImageColorAllocate(img, 255, 255, 255); </code><code class="cpp comments">// 白色</code></div>
<div class="line number55 index54 alt2"><code class="cpp spaces">    </code><code class="cpp plain">blue = gdImageColorAllocate(img, 0, 0, 149); </code><code class="cpp comments">// 藍色</code></div>
<div class="line number56 index55 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 根據畫布大小塗上紅色長方形區域</code></div>
<div class="line number57 index56 alt2"><code class="cpp spaces">    </code><code class="cpp plain">gdImageFilledRectangle(img, 0, 0, width, height, red);</code></div>
<div class="line number58 index57 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 青天面積為整面國旗的 1/4, 也是採用長方形塗色</code></div>
<div class="line number59 index58 alt2"><code class="cpp spaces">    </code><code class="cpp plain">gdImageFilledRectangle(img, 0, 0, (</code><code class="cpp color1 bold">int</code><code class="cpp plain">)(width/2.0), (</code><code class="cpp color1 bold">int</code><code class="cpp plain">)(height/2.0), blue);</code></div>
<div class="line number60 index59 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 先設法以填色畫出六個白色堆疊菱形</code></div>
<div class="line number61 index60 alt2"><code class="cpp spaces">    </code><code class="cpp plain">draw_white_sun(img, center_x, center_y, sun_radius, white);</code></div>
<div class="line number62 index61 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 利用一個藍色大圓與白色小圓畫出藍色環狀</code></div>
<div class="line number63 index62 alt2"><code class="cpp spaces">    </code><code class="cpp plain">gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);</code></div>
<div class="line number64 index63 alt1"><code class="cpp spaces">    </code><code class="cpp plain">gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);</code></div>
<div class="line number65 index64 alt2"> </div>
<div class="line number66 index65 alt1"><code class="cpp plain">}</code></div>
<div class="line number67 index66 alt2"> </div>
<div class="line number68 index67 alt1"><code class="cpp keyword bold">void</code> <code class="cpp plain">draw_white_sun(gdImagePtr img, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">center_x, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">center_y, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">sun_radius, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">color) {</code></div>
<div class="line number69 index68 alt2"><code class="cpp spaces">    </code><code class="cpp comments">// M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位</code></div>
<div class="line number70 index69 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度</code></div>
<div class="line number71 index70 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">float</code> <code class="cpp plain">deg = M_PI/180;</code></div>
<div class="line number72 index71 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度</code></div>
<div class="line number73 index72 alt2"><code class="cpp spaces">    </code><code class="cpp comments">// 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小</code></div>
<div class="line number74 index73 alt1"><code class="cpp spaces">    </code><code class="cpp color1 bold">float</code> <code class="cpp plain">sr = sun_radius/</code><code class="cpp functions bold">tan</code><code class="cpp plain">(75*deg);</code></div>
<div class="line number75 index74 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">ax, ay, bx, by, dx, dy, ex, ey;</code></div>
<div class="line number76 index75 alt1"><code class="cpp spaces">    </code><code class="cpp plain">gdPoint points[4];</code></div>
<div class="line number77 index76 alt2"><code class="cpp spaces">   </code> </div>
<div class="line number78 index77 alt1"><code class="cpp spaces">    </code><code class="cpp plain">ax = center_x;</code></div>
<div class="line number79 index78 alt2"><code class="cpp spaces">    </code><code class="cpp plain">ay = center_y - sun_radius;</code></div>
<div class="line number80 index79 alt1"><code class="cpp spaces">    </code><code class="cpp plain">bx = center_x - sun_radius*</code><code class="cpp functions bold">tan</code><code class="cpp plain">(15*deg);</code></div>
<div class="line number81 index80 alt2"><code class="cpp spaces">    </code><code class="cpp plain">by = center_y;</code></div>
<div class="line number82 index81 alt1"><code class="cpp spaces">    </code><code class="cpp plain">ex = center_x;</code></div>
<div class="line number83 index82 alt2"><code class="cpp spaces">    </code><code class="cpp plain">ey = center_y + sun_radius;</code></div>
<div class="line number84 index83 alt1"><code class="cpp spaces">    </code><code class="cpp plain">dx = center_x + sun_radius*</code><code class="cpp functions bold">tan</code><code class="cpp plain">(15*deg);</code></div>
<div class="line number85 index84 alt2"><code class="cpp spaces">    </code><code class="cpp plain">dy = center_y;</code></div>
<div class="line number86 index85 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域</code></div>
<div class="line number87 index86 alt2"><code class="cpp spaces">    </code><code class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code class="cpp color1 bold">int</code> <code class="cpp plain">i=1;i&lt;=6;i++){</code></div>
<div class="line number88 index87 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// A</code></div>
<div class="line number89 index88 alt2"><code class="cpp spaces">    </code><code class="cpp plain">points[0].x = ax+sun_radius*</code><code class="cpp functions bold">sin</code><code class="cpp plain">(30*deg*i);</code></div>
<div class="line number90 index89 alt1"><code class="cpp spaces">    </code><code class="cpp plain">points[0].y = ay+sun_radius-sun_radius*</code><code class="cpp functions bold">cos</code><code class="cpp plain">(30*deg*i);</code></div>
<div class="line number91 index90 alt2"><code class="cpp spaces">    </code><code class="cpp comments">// B</code></div>
<div class="line number92 index91 alt1"><code class="cpp spaces">    </code><code class="cpp plain">points[1].x = bx+sr-sr*</code><code class="cpp functions bold">cos</code><code class="cpp plain">(30*deg*i);</code></div>
<div class="line number93 index92 alt2"><code class="cpp spaces">    </code><code class="cpp plain">points[1].y = by-sr*</code><code class="cpp functions bold">sin</code><code class="cpp plain">(30*deg*i);</code></div>
<div class="line number94 index93 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// E</code></div>
<div class="line number95 index94 alt2"><code class="cpp spaces">    </code><code class="cpp plain">points[2].x = ex-sun_radius*</code><code class="cpp functions bold">sin</code><code class="cpp plain">(30*deg*i);</code></div>
<div class="line number96 index95 alt1"><code class="cpp spaces">    </code><code class="cpp plain">points[2].y = ey-(sun_radius-sun_radius*</code><code class="cpp functions bold">cos</code><code class="cpp plain">(30*deg*i));</code></div>
<div class="line number97 index96 alt2"><code class="cpp spaces">    </code><code class="cpp comments">// D</code></div>
<div class="line number98 index97 alt1"><code class="cpp spaces">    </code><code class="cpp plain">points[3].x = dx-(sr-sr*</code><code class="cpp functions bold">cos</code><code class="cpp plain">(30*deg*i));</code></div>
<div class="line number99 index98 alt2"><code class="cpp spaces">    </code><code class="cpp plain">points[3].y = dy+sr*</code><code class="cpp functions bold">sin</code><code class="cpp plain">(30*deg*i);</code></div>
<div class="line number100 index99 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 對菱形區域範圍塗色</code></div>
<div class="line number101 index100 alt2"><code class="cpp spaces">    </code><code class="cpp plain">gdImageFilledPolygon(img, points, 4, color);</code></div>
<div class="line number102 index101 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 在菱形區域外圍畫線, 明確界定菱形範圍</code></div>
<div class="line number103 index102 alt2"><code class="cpp spaces">    </code><code class="cpp plain">gdImagePolygon(img, points, 4, color);</code></div>
<div class="line number104 index103 alt1"><code class="cpp spaces">    </code><code class="cpp plain">}</code></div>
<div class="line number105 index104 alt2"><code class="cpp plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><img alt="" height="267" src="https://41223110.github.io/cp2023/images/roc_flag_in_gd.png" width="400"/></p>
<div>
<div class="syntaxhighlighter cpp" id="highlighter_912049">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
<div class="line number50 index49 alt1">50</div>
<div class="line number51 index50 alt2">51</div>
<div class="line number52 index51 alt1">52</div>
<div class="line number53 index52 alt2">53</div>
<div class="line number54 index53 alt1">54</div>
<div class="line number55 index54 alt2">55</div>
<div class="line number56 index55 alt1">56</div>
<div class="line number57 index56 alt2">57</div>
<div class="line number58 index57 alt1">58</div>
<div class="line number59 index58 alt2">59</div>
<div class="line number60 index59 alt1">60</div>
<div class="line number61 index60 alt2">61</div>
<div class="line number62 index61 alt1">62</div>
<div class="line number63 index62 alt2">63</div>
<div class="line number64 index63 alt1">64</div>
<div class="line number65 index64 alt2">65</div>
<div class="line number66 index65 alt1">66</div>
<div class="line number67 index66 alt2">67</div>
<div class="line number68 index67 alt1">68</div>
<div class="line number69 index68 alt2">69</div>
<div class="line number70 index69 alt1">70</div>
<div class="line number71 index70 alt2">71</div>
<div class="line number72 index71 alt1">72</div>
<div class="line number73 index72 alt2">73</div>
<div class="line number74 index73 alt1">74</div>
<div class="line number75 index74 alt2">75</div>
<div class="line number76 index75 alt1">76</div>
<div class="line number77 index76 alt2">77</div>
<div class="line number78 index77 alt1">78</div>
<div class="line number79 index78 alt2">79</div>
<div class="line number80 index79 alt1">80</div>
<div class="line number81 index80 alt2">81</div>
<div class="line number82 index81 alt1">82</div>
<div class="line number83 index82 alt2">83</div>
<div class="line number84 index83 alt1">84</div>
<div class="line number85 index84 alt2">85</div>
<div class="line number86 index85 alt1">86</div>
<div class="line number87 index86 alt2">87</div>
<div class="line number88 index87 alt1">88</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></div>
<div class="line number2 index1 alt1"><code class="cpp preprocessor">#include &lt;gd.h&gt;</code></div>
<div class="line number3 index2 alt2"><code class="cpp preprocessor">#include &lt;math.h&gt;</code></div>
<div class="line number4 index3 alt1"><code class="cpp spaces">  </code> </div>
<div class="line number5 index4 alt2"><code class="cpp keyword bold">void</code> <code class="cpp plain">draw_usa_flag(gdImagePtr img);</code></div>
<div class="line number6 index5 alt1"><code class="cpp keyword bold">void</code> <code class="cpp plain">draw_star(gdImagePtr img, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">x, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">y, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">size, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">color, </code><code class="cpp color1 bold">double</code> <code class="cpp plain">rotation_angle);</code></div>
<div class="line number7 index6 alt2"><code class="cpp spaces">  </code> </div>
<div class="line number8 index7 alt1"><code class="cpp color1 bold">int</code> <code class="cpp plain">main() {</code></div>
<div class="line number9 index8 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">width = 800;</code></div>
<div class="line number10 index9 alt1"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">height = (</code><code class="cpp color1 bold">int</code><code class="cpp plain">)(width / 1.9);</code></div>
<div class="line number11 index10 alt2"><code class="cpp spaces">  </code> </div>
<div class="line number12 index11 alt1"><code class="cpp spaces">    </code><code class="cpp plain">gdImagePtr img = gdImageCreateTrueColor(width, height);</code></div>
<div class="line number13 index12 alt2"><code class="cpp spaces">    </code><code class="cpp plain">gdImageAlphaBlending(img, 0);</code></div>
<div class="line number14 index13 alt1"><code class="cpp spaces">  </code> </div>
<div class="line number15 index14 alt2"><code class="cpp spaces">    </code><code class="cpp plain">draw_usa_flag(img);</code></div>
<div class="line number16 index15 alt1"><code class="cpp spaces">  </code> </div>
<div class="line number17 index16 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">FILE</code> <code class="cpp plain">*outputFile = </code><code class="cpp functions bold">fopen</code><code class="cpp plain">(</code><code class="cpp string">"./../images/usa_flag.png"</code><code class="cpp plain">, </code><code class="cpp string">"wb"</code><code class="cpp plain">);</code></div>
<div class="line number18 index17 alt1"><code class="cpp spaces">    </code><code class="cpp keyword bold">if</code> <code class="cpp plain">(outputFile == NULL) {</code></div>
<div class="line number19 index18 alt2"><code class="cpp spaces">        </code><code class="cpp functions bold">fprintf</code><code class="cpp plain">(stderr, </code><code class="cpp string">"打开输出文件时出错。\n"</code><code class="cpp plain">);</code></div>
<div class="line number20 index19 alt1"><code class="cpp spaces">        </code><code class="cpp keyword bold">return</code> <code class="cpp plain">1;</code></div>
<div class="line number21 index20 alt2"><code class="cpp spaces">    </code><code class="cpp plain">}</code></div>
<div class="line number22 index21 alt1"><code class="cpp spaces">  </code> </div>
<div class="line number23 index22 alt2"><code class="cpp spaces">    </code><code class="cpp plain">gdImagePngEx(img, outputFile, 9);</code></div>
<div class="line number24 index23 alt1"><code class="cpp spaces">    </code><code class="cpp functions bold">fclose</code><code class="cpp plain">(outputFile);</code></div>
<div class="line number25 index24 alt2"><code class="cpp spaces">    </code><code class="cpp plain">gdImageDestroy(img);</code></div>
<div class="line number26 index25 alt1"><code class="cpp spaces">  </code> </div>
<div class="line number27 index26 alt2"><code class="cpp spaces">    </code><code class="cpp keyword bold">return</code> <code class="cpp plain">0;</code></div>
<div class="line number28 index27 alt1"><code class="cpp plain">}</code></div>
<div class="line number29 index28 alt2"><code class="cpp spaces">  </code> </div>
<div class="line number30 index29 alt1"><code class="cpp keyword bold">void</code> <code class="cpp plain">draw_usa_flag(gdImagePtr img) {</code></div>
<div class="line number31 index30 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">width = gdImageSX(img);</code></div>
<div class="line number32 index31 alt1"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">height = gdImageSY(img);</code></div>
<div class="line number33 index32 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">red, white, blue;</code></div>
<div class="line number34 index33 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 国旗颜色</code></div>
<div class="line number35 index34 alt2"><code class="cpp spaces">    </code><code class="cpp plain">red = gdImageColorAllocate(img, 178, 34, 52); </code><code class="cpp comments">// 红色条纹</code></div>
<div class="line number36 index35 alt1"><code class="cpp spaces">    </code><code class="cpp plain">white = gdImageColorAllocate(img, 255, 255, 255); </code><code class="cpp comments">// 白色条纹</code></div>
<div class="line number37 index36 alt2"><code class="cpp spaces">    </code><code class="cpp plain">blue = gdImageColorAllocate(img, 60, 59, 110); </code><code class="cpp comments">// 蓝色矩形</code></div>
<div class="line number38 index37 alt1"><code class="cpp spaces">  </code> </div>
<div class="line number39 index38 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">stripe_height = height / 13;</code></div>
<div class="line number40 index39 alt1"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">stripe_width = width;</code></div>
<div class="line number41 index40 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">star_size = (</code><code class="cpp color1 bold">int</code><code class="cpp plain">)(0.0308 * height); </code><code class="cpp comments">// 星星大小</code></div>
<div class="line number42 index41 alt1"><code class="cpp spaces">  </code> </div>
<div class="line number43 index42 alt2"><code class="cpp spaces">    </code><code class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code class="cpp color1 bold">int</code> <code class="cpp plain">y = 0; y &lt; height; y += stripe_height) {</code></div>
<div class="line number44 index43 alt1"><code class="cpp spaces">        </code><code class="cpp keyword bold">if</code> <code class="cpp plain">(y / stripe_height % 2 == 0) {</code></div>
<div class="line number45 index44 alt2"><code class="cpp spaces">            </code><code class="cpp plain">gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);</code></div>
<div class="line number46 index45 alt1"><code class="cpp spaces">        </code><code class="cpp plain">} </code><code class="cpp keyword bold">else</code> <code class="cpp plain">{</code></div>
<div class="line number47 index46 alt2"><code class="cpp spaces">            </code><code class="cpp plain">gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);</code></div>
<div class="line number48 index47 alt1"><code class="cpp spaces">        </code><code class="cpp plain">}</code></div>
<div class="line number49 index48 alt2"><code class="cpp spaces">    </code><code class="cpp plain">}</code></div>
<div class="line number50 index49 alt1"><code class="cpp spaces">  </code> </div>
<div class="line number51 index50 alt2"><code class="cpp spaces">    </code><code class="cpp plain">gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);</code></div>
<div class="line number52 index51 alt1"><code class="cpp spaces">  </code> </div>
<div class="line number53 index52 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">star_spacing_x = (</code><code class="cpp color1 bold">int</code><code class="cpp plain">)(0.129 * height); </code><code class="cpp comments">// 横向星星之间的间距</code></div>
<div class="line number54 index53 alt1"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">star_spacing_y = (</code><code class="cpp color1 bold">int</code><code class="cpp plain">)(0.054 * height); </code><code class="cpp comments">// 纵向星星之间的间距</code></div>
<div class="line number55 index54 alt2"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">star_start_x = (</code><code class="cpp color1 bold">int</code><code class="cpp plain">)(0.125 * height); </code><code class="cpp comments">// 星星的起始X位置</code></div>
<div class="line number56 index55 alt1"><code class="cpp spaces">    </code><code class="cpp color1 bold">int</code> <code class="cpp plain">star_start_y = (</code><code class="cpp color1 bold">int</code><code class="cpp plain">)(0.0485 * height); </code><code class="cpp comments">// 星星的起始Y位置</code></div>
<div class="line number57 index56 alt2"><code class="cpp spaces">  </code> </div>
<div class="line number58 index57 alt1"><code class="cpp spaces">    </code><code class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code class="cpp color1 bold">int</code> <code class="cpp plain">row = 0; row &lt; 9; row++) {</code></div>
<div class="line number59 index58 alt2"><code class="cpp spaces">        </code><code class="cpp color1 bold">int</code> <code class="cpp plain">starsPerRow = (row % 2 == 0) ? 6 : 5;</code></div>
<div class="line number60 index59 alt1"><code class="cpp spaces">  </code> </div>
<div class="line number61 index60 alt2"><code class="cpp spaces">        </code><code class="cpp comments">// 计算2、4、6和8排星星的偏移量</code></div>
<div class="line number62 index61 alt1"><code class="cpp spaces">        </code><code class="cpp color1 bold">int</code> <code class="cpp plain">offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;</code></div>
<div class="line number63 index62 alt2"><code class="cpp spaces">  </code> </div>
<div class="line number64 index63 alt1"><code class="cpp spaces">        </code><code class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code class="cpp color1 bold">int</code> <code class="cpp plain">star = 0; star &lt; starsPerRow; star++) {</code></div>
<div class="line number65 index64 alt2"><code class="cpp spaces">            </code><code class="cpp color1 bold">int</code> <code class="cpp plain">x = star_start_x + star * star_spacing_x + offset_x;</code></div>
<div class="line number66 index65 alt1"><code class="cpp spaces">  </code> </div>
<div class="line number67 index66 alt2"><code class="cpp spaces">            </code><code class="cpp comments">// 旋转角度（以弧度为单位）</code></div>
<div class="line number68 index67 alt1"><code class="cpp spaces">            </code><code class="cpp color1 bold">double</code> <code class="cpp plain">rotation_angle = M_PI / 5; </code><code class="cpp comments">// 忘記多少度的旋转</code></div>
<div class="line number69 index68 alt2"><code class="cpp spaces">  </code> </div>
<div class="line number70 index69 alt1"><code class="cpp spaces">            </code><code class="cpp color1 bold">int</code> <code class="cpp plain">y = star_start_y + row * star_spacing_y;</code></div>
<div class="line number71 index70 alt2"><code class="cpp spaces">            </code><code class="cpp plain">draw_star(img, x, y, star_size, white, rotation_angle);</code></div>
<div class="line number72 index71 alt1"><code class="cpp spaces">        </code><code class="cpp plain">}</code></div>
<div class="line number73 index72 alt2"><code class="cpp spaces">    </code><code class="cpp plain">}</code></div>
<div class="line number74 index73 alt1"><code class="cpp plain">}</code></div>
<div class="line number75 index74 alt2"><code class="cpp spaces">  </code> </div>
<div class="line number76 index75 alt1"><code class="cpp keyword bold">void</code> <code class="cpp plain">draw_star(gdImagePtr img, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">x, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">y, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">size, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">color, </code><code class="cpp color1 bold">double</code> <code class="cpp plain">rotation_angle) {</code></div>
<div class="line number77 index76 alt2"><code class="cpp spaces">    </code><code class="cpp plain">gdPoint points[10];</code></div>
<div class="line number78 index77 alt1"><code class="cpp spaces">  </code> </div>
<div class="line number79 index78 alt2"><code class="cpp spaces">    </code><code class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code class="cpp color1 bold">int</code> <code class="cpp plain">i = 0; i &lt; 10; i++) {</code></div>
<div class="line number80 index79 alt1"><code class="cpp spaces">        </code><code class="cpp color1 bold">double</code> <code class="cpp plain">angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;</code></div>
<div class="line number81 index80 alt2"><code class="cpp spaces">        </code><code class="cpp color1 bold">int</code> <code class="cpp plain">radius = (i % 2 == 0) ? size : size / 2;</code></div>
<div class="line number82 index81 alt1"><code class="cpp spaces">        </code><code class="cpp plain">points[i].x = x + radius * </code><code class="cpp functions bold">cos</code><code class="cpp plain">(angle);</code></div>
<div class="line number83 index82 alt2"><code class="cpp spaces">        </code><code class="cpp plain">points[i].y = y + radius * </code><code class="cpp functions bold">sin</code><code class="cpp plain">(angle);</code></div>
<div class="line number84 index83 alt1"><code class="cpp spaces">    </code><code class="cpp plain">}</code></div>
<div class="line number85 index84 alt2"><code class="cpp spaces">  </code> </div>
<div class="line number86 index85 alt1"><code class="cpp spaces">    </code><code class="cpp comments">// 用指定的颜色填充星星</code></div>
<div class="line number87 index86 alt2"><code class="cpp spaces">    </code><code class="cpp plain">gdImageFilledPolygon(img, points, 10, color);</code></div>
<div class="line number88 index87 alt1"><code class="cpp plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><img alt="" height="211" src="https://41223110.github.io/cp2023/images/usa_flag.png" width="401"/></p>
<h1>w13</h1>
<p>test</p>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>