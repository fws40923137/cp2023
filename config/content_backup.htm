<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite </a></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<div style="width: 100%; height: 100%;"></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<h1>w4-w5</h1>
<p><span>蒐集牛頓第二運動定律、mass-spring-damper 系統、Euler's Method 數值分析相關資料</span></p>
<p><span>-----------------------------------------------------------------------------------------------------------------</span></p>
<h2>牛頓第二運動定律</h2>
<p><img alt="" height="592" src="/images/螢幕擷取畫面 2024-01-09 150009.png" width="584"/></p>
<h2>mass-spring-damper 系統</h2>
<p></p>
<p><span><img alt="" height="610" src="/images/螢幕擷取畫面 2024-01-09 150128.png" width="588"/> </span></p>
<h2>Eulers Method 數值分析</h2>
<p><img alt="" height="666" src="/images/螢幕擷取畫面 2024-01-09 145817.png" width="587"/></p>
<p></p>
<div>
<div class="syntaxhighlighter cpp" id="highlighter_564769"></div>
</div>
<p></p>
<p></p>
<p></p>
<h1>w6-w7</h1>
<p>C 程式練習一:</p>
<p><span>請從 </span><a href="https://www.w3resource.com/c-programming-exercises/">https://www.w3resource.com/c-programming-exercises/</a><span><span> </span>網頁中自選 10 個練習範例, 分別在 Replit, Windows 與 Linux (or macOS) 中執行後, 取下執行畫面放入個人的 Github Pages 網頁 (即帳號.github.io 網站), 以<span> </span><span>ANSIC</span><span> </span>作為頁面標題並詳細說明每一行的程式語法.</span></p>
<p><span>C 程式練習二:</span></p>
<p>請從 <a href="https://nfuedu-my.sharepoint.com/:b:/g/personal/yen_nfu_edu_tw/EWd1cR2zOStOjVSduSw6pQMBv1fB6tWu-P9qfVH2YxbDPw?e=uOZW7N">jsliu_c_programming.pdf</a><span> </span>(需要下載密碼)與 <a href="https://link.springer.com/content/pdf/10.1007/978-1-4842-5064-8_1.pdf?pdf=inline%20link">Introduction to C</a> (經由校園網路或 VPN 下載)電子書中各擷取 10 個 C 程式範例, 分別:</p>
<p>1. 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Go 類編譯方式執行.</p>
<p>2. 在可攜程式環境中以 SciTE + Tiny C Compiler 編譯系統, 使用 Tools - Compile 編譯連結後取得 a.out, 然後在命令列中以 a.out 執行.</p>
<p>3. 在 Replit 全球資訊網 IDE 環境中的 Shell 頁面, 以 cc ex1.c 產生可執行檔案 a.out, 並以 ./a.out 執行, 或者以 cc ex1.c -o ex1 指定編譯連結後的可執行檔案名稱為 ex1 後, 以 ./ex1 執行.</p>
<p>最後將所選擇的 C 程式範例執行過程與相關說明內容, 整理在<span>個人 github 帳號下的 cp2023 倉儲網頁</span>中的<span> </span><span>c_ex</span><span> </span>頁面中.</p>
<h2>程式練習-1 程式碼練習</h2>
<p>1- 顯示前十個自然數</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

int main() {
int i;

// 打印一條顯示程式意圖的消息
printf("前10個自然數是：\n");

// 循環遍歷前10個自然數並打印每個數字
for (i = 1; i &lt;= 10; i++) {
printf("%d ", i); // 打印當前數字
}

// 返回0以表示成功執行
return 0;
}

</pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">前10個自然數是：
1 2 3 4 5 6 7 8 9 10</pre>
<p>2- <span>計算前 10 個自然數的和</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

int main() {
int j, sum = 0; // 宣告整數變量j和sum，並初始化sum為0。

printf("前10個自然數是 :\n");

// 進行迴圈，從1到10，計算總和，並打印每個數字
for (j = 1; j &lt;= 10; j++) {
sum = sum + j; // 將當前數字加到總和中
printf("%d ", j); // 打印當前數字
}

printf("\n總和為 : %d\n", sum); // 打印總和

// 返回0以表示成功執行
return 0;
}</pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">前10個自然數是 :
1 2 3 4 5 6 7 8 9 10
總和為 : 55</pre>
<p>3- <span>顯示整數的立方</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

int main() {
int i, ctr; // 宣告變量 'i' 作為循環計數器和 'ctr' 作為用戶輸入。

printf("輸入項目的數量 : "); // 打印消息以提示用戶輸入。
scanf("%d", &amp;ctr); // 從用戶讀取 'ctr' 的值。

for (i = 1; i &lt;= ctr; i++) { // 開始一個循環，遍歷 'ctr' 次。
printf("數字是 : %d，%d 的立方是 : %d \n", i, i, (i * i * i)); // 打印數字、其立方和相應的消息。
}

return 0; // 返回0以表示成功執行。
}</pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">輸入項目的數量 : 5
數字是 : 1，1 的立方是 : 1
數字是 : 2，2 的立方是 : 8
數字是 : 3，3 的立方是 : 27
數字是 : 4，4 的立方是 : 64
數字是 : 5，5 的立方是 : 125</pre>
<p>4- <span>讀取任意月份的整數並顯示該月的天數</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

void main() {
int monno; // 宣告一個整數變量 'monno' 用於存儲月份編號。
char monnm[15]; // 宣告一個字符數組 'monnm' 用於存儲月份名稱。

printf("輸入月份編號 : "); // 打印消息以提示用戶輸入月份編號。
scanf("%d", &amp;monno); // 從用戶讀取月份編號的值。

switch (monno) { // 使用 switch 语句根据月份編號執行相應的代碼塊。
case 1:
case 3:
case 5:
case 7:
case 8:
case 10:
case 12:
printf("該月有31天。 \n");
break;
case 2:
printf("第2個月是二月，有28天。 \n");
printf("在閏年中，二月有29天。\n");
break;
case 4:
case 6:
case 9:
case 11:
printf("該月有30天。 \n");
break;
default:
printf("無效的月份編號。\n請重試....\n");
break;
}
}</pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">輸入月份編號 : 4
該月有30天。</pre>
<p><br/><br/></p>
<p>5- <span>接受兩個整數並檢查它們是否相等</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

void main() {
int int1, int2; // 宣告兩個整數變量 'int1' 和 'int2'。

printf("輸入Number1和Number2的值 : "); // 打印消息以提示用戶輸入Number1和Number2的值。
scanf("%d %d", &amp;int1, &amp;int2); // 從用戶讀取Number1和Number2的值。

if (int1 == int2) {
printf("Number1和Number2相等\n"); // 如果Number1等於Number2，則打印相等的消息。
} else {
printf("Number1和Number2不相等\n"); // 如果Number1不等於Number2，則打印不相等的消息。
}
}

</pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">輸入Number1和Number2的值 : 10 20
Number1和Number2不相等</pre>
<p>6- 檢查給定的數字是偶數還是奇數</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

void main() {
int num1, rem1; // 宣告兩個整數變量 'num1' 和 'rem1'。

printf("輸入一個整數 : "); // 打印消息以提示用戶輸入一個整數。
scanf("%d", &amp;num1); // 從用戶讀取整數的值。

rem1 = num1 % 2; // 使用取餘運算符計算 'num1' 除以2的餘數，存儲在 'rem1' 中。

if (rem1 == 0) {
printf("%d 是一個偶數\n", num1); // 如果 'rem1' 等於0，則 'num1' 是偶數，打印相應的消息。
} else {
printf("%d 是一個奇數\n", num1); // 如果 'rem1' 不等於0，則 'num1' 是奇數，打印相應的消息。
}
}</pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">輸入一個整數 : 15
15 是一個奇數</pre>
<p>7- <span>檢查給定的數字是正數還是負數</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

void main() {
int num; // 宣告一個整數變量 'num'。

printf("輸入一個數字 :"); // 打印消息以提示用戶輸入一個數字。
scanf("%d", &amp;num); // 從用戶讀取數字的值。

if (num &gt;= 0) {
printf("%d 是一個正數 \n", num); // 如果 'num' 大於或等於0，則 'num' 是正數，打印相應的消息。
} else {
printf("%d 是一個負數 \n", num); // 如果 'num' 小於0，則 'num' 是負數，打印相應的消息。
}
}

</pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">輸入一個數字 : 7
7 是一個正數

</pre>
<p>8- <span>將攝氏度轉換為華氏度</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

float temp_f; /* 華氏溫度 */
float temp_c; /* 攝氏溫度 */
char line_text[50]; /* 一行輸入 */

int main() {
printf("輸入溫度（攝氏度）: "); // 提示用戶輸入攝氏溫度。
fgets(line_text, sizeof(line_text), stdin); // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
sscanf(line_text, "%f", &amp;temp_c); // 將 'line_text' 中的輸入轉換為浮點數，並將其存儲在 'temp_c' 中。

temp_f = ((9.0 / 5.0) * temp_c) + 32.0; // 將溫度從攝氏度轉換為華氏度，並將其存儲在 'temp_f' 中。
printf("%f degrees Fahrenheit.\n", temp_f); // 打印以華氏度表示的溫度。

return 0; // 返回0以表示程序成功執行。
}</pre>
<p>輸入溫度（攝氏度）: 20<br/>輸出溫度(華氏度): 68.000000 </p>
<p>9- <span>將公里每小時轉換為英哩每小時</span><br/><br/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

float kmph; /* 每小時公里數 */
float miph; /* 每小時英里數（將被計算） */
char line_text[50]; /* 鍵盤輸入的一行文字 */

int main()
{
printf("輸入每小時公里數: "); // 提示用戶輸入每小時公里數。
fgets(line_text, sizeof(line_text), stdin); // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
sscanf(line_text, "%f", &amp;kmph); // 將輸入轉換為浮點數，並將其存儲在 'kmph' 中。

miph = (kmph * 0.6213712); // 將每小時公里數轉換為每小時英里數。
printf("%f 英里每小時\n", miph); // 以每小時英里數的形式打印結果。

return 0; // 返回0以表示程序成功執行。
}</pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">輸入每小時公里數: 100
62.137115 英里每小時</pre>
<p>10- 輸入<span>小時和分鐘數，計算總分鐘數</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // 包含標準輸入/輸出頭文件。

int hrs; /* 給定的小時數 */
int mins; /* 給定的分鐘數 */
int tot_mins; /* 總分鐘數（將被計算） */

const int MINaHOUR = 60; /* 一小時的分鐘數 */

char line_text[50]; /* 鍵盤輸入的一行文字 */

int main() {
printf("輸入小時: "); // 提示用戶輸入小時。
fgets(line_text, sizeof(line_text), stdin); // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
sscanf(line_text, "%d", &amp;hrs); // 將輸入轉換為整數，並將其存儲在 'hrs' 中。

printf("輸入分鐘: "); // 提示用戶輸入分鐘。
fgets(line_text, sizeof(line_text), stdin); // 從用戶讀取一行輸入，並將其存儲在 'line_text' 中。
sscanf(line_text, "%d", &amp;mins); // 將輸入轉換為整數，並將其存儲在 'mins' 中。

tot_mins = mins + (hrs * MINaHOUR); // 計算總分鐘數。

printf("總共: %d 分鐘。\n", tot_mins); // 打印總分鐘數。

return 0; // 返回0以表示程序成功執行。
}</pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">輸入小時: 2
輸入分鐘: 30
總共: 150 分鐘。</pre>
<p><br/><br/></p>
<p><br/><br/></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h2>程式練習-2 繪製國旗</h2>
<p>1.繪製台灣國旗</p>
<div class="line number7 index6 alt2">
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);
 
int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 3:2
    int height = (int)(width*2.0 / 3.0);
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    draw_roc_flag(img);
 
    FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖
    // 由於中央白日圓形的半徑為青天寬度的 1/8
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
    int sun_radius = (int)(width/8);
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
    int white_circle_dia = sun_radius;
    // 中央藍色圓形半徑為中央白日的 1又 2/15
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
    // 根據畫布大小塗上紅色長方形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
    // 先設法以填色畫出六個白色堆疊菱形
    draw_white_sun(img, center_x, center_y, sun_radius, white);
    // 利用一個藍色大圓與白色小圓畫出藍色環狀
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);
 
}
 
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位
    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度
    float deg = M_PI/180;
    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度
    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小
    float sr = sun_radius/tan(75*deg);
    int ax, ay, bx, by, dx, dy, ex, ey;
    gdPoint points[4];
    
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域
    for (int i=1;i&lt;=6;i++){
    // A
    points[0].x = ax+sun_radius*sin(30*deg*i);
    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);
    // B
    points[1].x = bx+sr-sr*cos(30*deg*i);
    points[1].y = by-sr*sin(30*deg*i);
    // E
    points[2].x = ex-sun_radius*sin(30*deg*i);
    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));
    // D
    points[3].x = dx-(sr-sr*cos(30*deg*i));
    points[3].y = dy+sr*sin(30*deg*i);
    // 對菱形區域範圍塗色
    gdImageFilledPolygon(img, points, 4, color);
    // 在菱形區域外圍畫線, 明確界定菱形範圍
    gdImagePolygon(img, points, 4, color);
    }
}
</pre>
<br/><img alt="" height="267" src="https://41223110.github.io/cp2023/images/roc_flag_in_gd.png" width="400"/></div>
<div class="line number7 index6 alt2">2. 繪製美國國旗</div>
<div>
<div class="syntaxhighlighter cpp" id="highlighter_912049">
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;// 函數聲明
void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);int main() {
// 設置圖像寬高
int width = 800;
int height = (int)(width / 1.9);// 創建一個真彩色圖像
gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);// 繪製美國國旗
draw_usa_flag(img);// 打開輸出文件
FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "打開輸出文件時出錯。\n");
return 1;
}// 將圖像保存為PNG文件
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);return 0;
}void draw_usa_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
// 國旗顏色
red = gdImageColorAllocate(img, 178, 34, 52); // 紅色條紋
white = gdImageColorAllocate(img, 255, 255, 255); // 白色條紋
blue = gdImageColorAllocate(img, 60, 59, 110); // 藍色矩形int stripe_height = height / 13;
int stripe_width = width;
int star_size = (int)(0.0308 * height); // 星星大小// 繪製紅白條紋
for (int y = 0; y &lt; height; y += stripe_height) {
if (y / stripe_height % 2 == 0) {
gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
} else {
gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
}
}// 繪製藍色矩形
gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);int star_spacing_x = (int)(0.129 * height); // 橫向星星之間的間距
int star_spacing_y = (int)(0.054 * height); // 縱向星星之間的間距
int star_start_x = (int)(0.125 * height); // 星星的起始X位置
int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置// 繪製星星
for (int row = 0; row &lt; 9; row++) {
int starsPerRow = (row % 2 == 0) ? 6 : 5;// 計算2、4、6和8排星星的偏移量
int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;for (int star = 0; star &lt; starsPerRow; star++) {
int x = star_start_x + star * star_spacing_x + offset_x;// 旋轉角度（以弧度為單位）
double rotation_angle = M_PI / 5; // 忘記多少度的旋轉int y = star_start_y + row * star_spacing_y;
draw_star(img, x, y, star_size, white, rotation_angle);
}
}
}void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
gdPoint points[10];for (int i = 0; i &lt; 10; i++) {
double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;
int radius = (i % 2 == 0) ? size : size / 2;
points[i].x = x + radius * cos(angle);
points[i].y = y + radius * sin(angle);
}// 用指定的顏色填充星星
gdImageFilledPolygon(img, points, 10, color);
}


</pre>
</div>
</div>
<p><img alt="" height="211" src="https://41223110.github.io/cp2023/images/usa_flag.png" width="401"/></p>
<p>3. 繪製日本國旗</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_japan_flag(gdImagePtr img);

int main() {
int width = 800;
int height = 600;

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

// 將背景填充為白色
int white = gdImageColorAllocate(img, 255, 255, 255);
gdImageFilledRectangle(img, 0, 0, width, height, white);

// 繪製日本國旗
draw_japan_flag(img);

FILE *outputFile = fopen("Y:/home_ipv6/japan_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "打開輸出文件時出錯。\n");
return 1;
}

// 保存圖像
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);

// 銷毀圖像
gdImageDestroy(img);

return 0;
}

void draw_japan_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);

// 計算日本國旗的位置和尺寸
int red = gdImageColorAllocate(img, 178, 34, 52); // 紅色圓圈
int circle_diameter = (int)(0.6 * height);

// 手動調整圓圈的位置，這裡進行了微調
int circle_x = (width - circle_diameter) / 2 + 175;
int circle_y = (height - circle_diameter) / 2 + 190;

// 繪製紅色圓圈
gdImageFilledEllipse(img, circle_x, circle_y, circle_diameter, circle_diameter, red);
}</pre>
<p><br/><img alt="" height="259" src="/images/japan_flag.png" width="345"/></p>
<p>4. 繪製德國國旗</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;

void draw_france_flag(gdImagePtr img);

int main() {
int width = 900;
int height = 600;

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

// 將背景填充為白色
int white = gdImageColorAllocate(img, 255, 255, 255);
gdImageFilledRectangle(img, 0, 0, width, height, white);

// 繪製法國國旗
draw_france_flag(img);

FILE *outputFile = fopen("Y:/home_ipv6/france_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "打開輸出文件時出錯。\n");
return 1;
}

// 保存圖像
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);

// 銷毀圖像
gdImageDestroy(img);

return 0;
}

void draw_france_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);

// 計算法國國旗的條紋寬度
int stripe_width = width / 3;

// 設定顏色
int blue = gdImageColorAllocate(img, 0, 35, 149);
int white = gdImageColorAllocate(img, 255, 255, 255);
int red = gdImageColorAllocate(img, 239, 65, 53);

// 繪製藍色條紋
gdImageFilledRectangle(img, 0, 0, stripe_width, height, blue);

// 繪製白色條紋
gdImageFilledRectangle(img, stripe_width, 0, 2 * stripe_width, height, white);

// 繪製紅色條紋
gdImageFilledRectangle(img, 2 * stripe_width, 0, width, height, red);
}</pre>
<p><img alt="" height="286" src="/images/france_flag.png" width="429"/><br/><br/></p>
<p>5.繪製英國國旗</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

// 函數原型
void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);

int main() {
// 設定國旗的寬和高
int width = 1200;
int height = width / 2;

// 創建圖像
gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

// 繪製英國國旗
draw_uk_flag(img);

// 將圖像保存到文件
FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "打開輸出文件時發生錯誤。\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);

return 0;
}

// 繪製英國國旗的具體實現
void draw_uk_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);

int red, white, blue;
red = gdImageColorAllocate(img, 204, 0, 0); // 紅色
white = gdImageColorAllocate(img, 255, 255, 255); // 白色
blue = gdImageColorAllocate(img, 0, 0, 153); // 藍色

// 填充整個圖像為藍色背景
gdImageFilledRectangle(img, 0, 0, width, height, blue);

// 繪製白色斜線和紅色斜線
{
int line_thickness = 100;
gdImageSetThickness(img, line_thickness);

int x1, y1, x2, y2;

// 繪製白色斜線
x1 = 0;
y1 = 600;
x2 = 1200;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, white);

x1 = 0;
y1 = 0;
x2 = 1200;
y2 = 600;
gdImageLine(img, x1, y1, x2, y2, white);
}
{
int line_thickness = 33;
gdImageSetThickness(img, line_thickness);

// 繪製紅色斜線
int x1, y1, x2, y2;

x1 = 566;
y1 = 300;
x2 = 1166;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, red);

x1 = 1233;
y1 = 600;
x2 = 633;
y2 = 300;
gdImageLine(img, x1, y1, x2, y2, red);

x1 = 566;
y1 = 300;
x2 = -33;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, red);

x1 = 600;
y1 = 316.5;
x2 = 0;
y2 = 616.5;
gdImageLine(img, x1, y1, x2, y2, red);
}
{
int line_thickness = 33;
gdImageSetThickness(img, line_thickness);

int x1, y1, x2, y2, x3, y3;

// 繪製斜線
x1 = 0;
y1 = 600;
x2 = 1200;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, red);

x1 = 1200;
y1 = 16.5;
x2 = 600;
y2 = 316.5;
gdImageLine(img, x1, y1, x2, y2, white);

x1 = 0;
y1 = 583.5;
x2 = 600;
y2 = 283.5;
gdImageLine(img, x1, y1, x2, y2, white);
}

// 繪製白色十字
int cross_width = width / 32;
int cross_arm_width = width / 32;
int center_x = width / 2;
int center_y = height / 2;

gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);

// 繪製紅色十字
gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}</pre>
<p><img alt="" height="227" src="/images/uk_flag.png" width="454"/><br/><br/></p>
<p></p><h1>w11</h1>
<div>
<div class="syntaxhighlighter cpp" id="highlighter_459024">
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

int main() {
// 設定圖像寬度和高度
int width = 800;
int height = 600;

// 創建一個TrueColor GD圖像
gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

// 打開輸出文件
FILE *outputFile = fopen("hellogd.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}

// 定義顏色
int red = gdImageColorAllocate(img, 255, 0, 0);
int blue = gdImageColorAllocate(img, 0, 0, 255);
int black = gdImageColorAllocate(img, 0, 0, 0);
int white = gdImageColorAllocate(img, 255, 255, 255);

// 長方形塗色
gdImageFilledRectangle(img, 0, 0, width, height, white);
gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue);

// 橢圓形塗色
gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);

// 橢圓形畫線
gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);

// 畫直線
gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue);

// 多邊形畫線
gdPoint points[4];
points[0].x = (int)width / 4;
points[0].y = (int)height * 3 / 4;
points[1].x = points[0].x + 100;
points[1].y = points[0].y;
points[2].x = points[1].x;
points[2].y = points[1].y + 100;
points[3].x = points[2].x - 100;
points[3].y = points[2].y;
gdImagePolygon(img, points, 4, black);

// 多邊形塗色
gdPoint points2[4];
points2[0].x = (int)width / 3;
points2[0].y = (int)height / 2;
points2[1].x = points2[0].x + 100;
points2[1].y = points2[0].y;
points2[2].x = points2[1].x;
points2[2].y = points2[1].y + 100;
points2[3].x = points2[2].x - 150;
points2[3].y = points2[2].y;
gdImageFilledPolygon(img, points2, 4, red);

// 將圖像保存為PNG文件
gdImagePngEx(img, outputFile, 9);

// 關閉文件和釋放內存
fclose(outputFile);
gdImageDestroy(img);

return 0;
}
</pre>
<br/><br/>
<p><img alt="" height="347" src="/images/w12.png" width="463"/></p>
</div>
</div>
<p></p>
<h1>w12</h1>
<p>可攜系統中 home_ipv6 目錄中的 .gitconfig</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_159010">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2"></div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">[http]</code></div>
<div class="line number2 index1 alt1"><code class="js spaces">    </code><code class="js plain">proxy = http:</code><code class="js comments">//p4.cycu.org:3128</code></div>
<div class="line number3 index2 alt2"><code class="js plain">[user]</code></div>
<div class="line number4 index3 alt1"><code class="js spaces">    </code><code class="js plain">name = 你的 github 帳號</code></div>
<div class="line number5 index4 alt2"><code class="js spaces">    </code><code class="js plain">email = 登記在 github 帳號的 email</code></div>
<div class="line number6 index5 alt1"><code class="js plain">[safe]</code></div>
<div class="line number7 index6 alt2"><code class="js spaces">    </code><code class="js plain">directory = *</code></div>
<div class="line number8 index7 alt1"><code class="js plain">[http </code><code class="js string">"https://github.com"</code><code class="js plain">]</code></div>
<div class="line number9 index8 alt2"><code class="js plain">sslVerify = </code><code class="js keyword">false</code></div>
<div class="line number10 index9 alt1"><code class="js plain">[pull]</code></div>
<div class="line number11 index10 alt2"><code class="js spaces">    </code><code class="js plain">rebase = </code><code class="js keyword">false</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>.gitconfig 設定說明:</p>
<p>[http]<br/>    proxy =<span> </span><a href="http://p4.cycu.org:3128/">http://p4.cycu.org:3128</a></p>
<p>也可以透過命令列中輸入 git config --global http.proxy<span> </span><a href="http://p4.cycu.org:3128/">http://p4.cycu.org:3128</a> 取得</p>
<p>這是設定 git 指令需要使用 http 或 https 協定擷取 cmsimde 時, 假如網路只支援 IPv6, 就必須透過代理主機連線到目前只支援 IPv4 的 github.com</p>
<p>[user]<br/>    name = 你的 github 帳號<br/>    email = 登記在 github 帳號的 email</p>
<p>是在 git commit -m "提交訊息" 時綁定身分用</p>
<p>[safe]<br/>    directory = *</p>
<p>則是宣告目前所使用的檔案目錄都是 safe</p>
<p>[http "https://github.com"]<br/>    sslVerify = false</p>
<p>表示當連線到 github.com 時所使用的 key 不用登記在 Windows 操作系統中</p>
<p>[pull]<br/>    rebase = false</p>
<p>表示 git pull 時, 並不使用 rebase, 而是直接 fetch 遠端資料, 並且進行 merge 合併</p>
<h1>w13</h1>
<p>打開puttygen.exe ，打開之後點擊Generate創建 ssh key</p>
<p>在空白區域移動滑鼠創建ssh key </p>
<p>ssh key 創建完之後，把Public key 複製 貼到github SSH key</p>
<p>然後點 save private key 存到 home裡面</p>
<p>打開putty.exe 點擊Session </p>
<p>Host Name 填入 github.com ， Saved Sessions 填學號</p>
<p>點Save</p>
<p>選Connection --&gt; Proxy， Proxy type改 HTTP CONNECT</p>
<p>Proxy hostname 填入 p4.cycu.org ， port 填入 3128</p>
<p>都用好之後點open  正常只會出現 login as : 綠框</p>
<p>打開 start_ipv6.bat</p>
<p>再打開putty.exe 選剛剛建好的Session  點load</p>
<p>-----------------------------------</p>
<p>在cmd裡輸入指令 regedit ，打開登入編輯程式</p>
<p>HKEY_CURRENT_USER --&gt; Software --&gt; SimonTatham  &lt;&lt;--把這個展開 看有沒有剛創建好的session</p>
<p>然後對SimonTatham點右鍵匯出 存到 tmp ，再去 tmp 資料夾檢查有沒有學號_session.reg檔案</p>
<p></p>
<p>後面忘了 </p>
<h1>w15</h1>
<p>練習題</p>
<div>
<div>1) 根據 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EVcefUI2zPpAmP6lnLWLEAoBCBznMnvFpsNE-1VVFGvVZQ?e=goiPpP&amp;isSPOFile=1" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/evcefui2zppamp6lnlwleaobcbznmnvfpsne-1vvfgvvzq?e=goippp">roc_list_coord_flag.7z</a> 程式內容所印出的六組 ABED 等繪製 ROC 國旗白日圖案中的菱形四個關鍵點, 請直接在青天與滿地紅的圖案中, 利用白色作為畫線顏色, 將第二組的 ABED 等四個點的座標, 以直線相連.</div>
<div>----------------------------------------------------------------------------------------------------------------</div>
<div>先將 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EVcefUI2zPpAmP6lnLWLEAoBCBznMnvFpsNE-1VVFGvVZQ?e=goiPpP&amp;isSPOFile=1" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/evcefui2zppamp6lnlwleaobcbznmnvfpsne-1vvfgvvzq?e=goippp">roc_list_coord_flag.7z</a> 下載下來，用SciTE打開roc_list_coord_flag.c，執行一次可得到一個台灣國旗以及六組座標。</div>
<div>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color);

int main() {
// width 3: height 2
int width = 1200;
// 國旗長寬比為 3:2
int height = (int)(width * 2.0 / 3.0);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_roc_flag(img);

FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}

void draw_roc_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
int center_x = (int)(width / 4);
int center_y = (int)(height / 4);
// gdImageFilledEllipse 需以長寬方向的 diameter 作圖
// 由於中央白日圓形的半徑為青天寬度的 1/8
// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
int sun_radius = (int)(width / 8);
// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
int white_circle_dia = sun_radius;
// 中央藍色圓形半徑為中央白日的 1又 2/15
int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;
// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
white = gdImageColorAllocate(img, 255, 255, 255); // 白色
blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
// 根據畫布大小塗上紅色長方形區域
gdImageFilledRectangle(img, 0, 0, width, height, red);
// 青天面積為整面國旗的 1/4, 也是採用長方形塗色
gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);
// 先設法以填色畫出六個白色堆疊菱形
draw_white_sun(img, center_x, center_y, sun_radius, white);
// 利用一個藍色大圓與白色小圓畫出藍色環狀
gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

// 連接四個座標點
connectPoints(img, 429, 125, 279, 165, white);
connectPoints(img, 279, 165, 170, 274, white);
connectPoints(img, 170, 274, 319, 234, white);
connectPoints(img, 319, 234, 429, 125, white);
}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
float deg = M_PI / 180;
float sr = sun_radius / tan(75 * deg);
int ax, ay, bx, by, dx, dy, ex, ey;

ax = center_x;
ay = center_y - sun_radius;

bx = center_x - sun_radius * tan(15 * deg);
by = center_y;

ex = center_x;
ey = center_y + sun_radius;

dx = center_x + sun_radius * tan(15 * deg);
dy = center_y;

for (int i = 1; i &lt;= 6; i++) {
int ax1 = ax + sun_radius * sin(30 * deg * i);
int ay1 = ay + sun_radius - sun_radius * cos(30 * deg * i);

int bx1 = bx + sr - sr * cos(30 * deg * i);
int by1 = by - sr * sin(30 * deg * i);

int ex1 = ex - sun_radius * sin(30 * deg * i);
int ey1 = ey - (sun_radius - sun_radius * cos(30 * deg * i));

int dx1 = dx - (sr - sr * cos(30 * deg * i));
int dy1 = dy + sr * sin(30 * deg * i);

// 對菱形區域範圍塗色
gdImageFilledPolygon(img, (gdPoint[4]){{ax1, ay1}, {bx1, by1}, {ex1, ey1}, {dx1, dy1}}, 4, color);


void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color) {
gdImageLine(img, x1, y1, x2, y2, color);
}</pre>
</div>
<div></div>
<div><img alt="" height="375" src="/images/roc_flag.png" width="563"/></div>
<div><img alt="" height="521" src="/images/螢幕擷取畫面 2023-12-19 154806.png" width="132"/></div>
<div>加入程式碼:</div>
<div>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 設置線條的粗度
gdImageSetThickness(img, 3);
</pre>
</div>
<div></div>
<div>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 連接四個座標點
connectPoints(img, 429, 125, 279, 165, white);
connectPoints(img, 279, 165, 170, 274, white);
connectPoints(img, 170, 274, 319, 234, white);
connectPoints(img, 319, 234, 429, 125, white);</pre>
<p>以下是完整程式碼:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color);

int main() {
// width 3: height 2
int width = 1200;
// 國旗長寬比為 3:2
int height = (int)(width * 2.0 / 3.0);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_roc_flag(img);

FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}

void draw_roc_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
int center_x = (int)(width / 4);
int center_y = (int)(height / 4);
// gdImageFilledEllipse 需以長寬方向的 diameter 作圖
// 由於中央白日圓形的半徑為青天寬度的 1/8
// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
int sun_radius = (int)(width / 8);
// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
int white_circle_dia = sun_radius;
// 中央藍色圓形半徑為中央白日的 1又 2/15
int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;
// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
white = gdImageColorAllocate(img, 255, 255, 255); // 白色
blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
// 根據畫布大小塗上紅色長方形區域
gdImageFilledRectangle(img, 0, 0, width, height, red);
// 青天面積為整面國旗的 1/4, 也是採用長方形塗色
gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);
// 先設法以填色畫出六個白色堆疊菱形
#draw_white_sun(img, center_x, center_y, sun_radius, white);
// 利用一個藍色大圓與白色小圓畫出藍色環狀
#gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
#gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

// 設置線條的粗度
gdImageSetThickness(img, 3);

// 連接四個座標點
connectPoints(img, 429, 125, 279, 165, white);
connectPoints(img, 279, 165, 170, 274, white);
connectPoints(img, 170, 274, 319, 234, white);
connectPoints(img, 319, 234, 429, 125, white);
}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
float deg = M_PI / 180;
float sr = sun_radius / tan(75 * deg);
int ax, ay, bx, by, dx, dy, ex, ey;

ax = center_x;
ay = center_y - sun_radius;

bx = center_x - sun_radius * tan(15 * deg);
by = center_y;

ex = center_x;
ey = center_y + sun_radius;

dx = center_x + sun_radius * tan(15 * deg);
dy = center_y;

for (int i = 1; i &lt;= 6; i++) {
int ax1 = ax + sun_radius * sin(30 * deg * i);
int ay1 = ay + sun_radius - sun_radius * cos(30 * deg * i);

int bx1 = bx + sr - sr * cos(30 * deg * i);
int by1 = by - sr * sin(30 * deg * i);

int ex1 = ex - sun_radius * sin(30 * deg * i);
int ey1 = ey - (sun_radius - sun_radius * cos(30 * deg * i));

int dx1 = dx - (sr - sr * cos(30 * deg * i));
int dy1 = dy + sr * sin(30 * deg * i);

// 對菱形區域範圍塗色
gdImageFilledPolygon(img, (gdPoint[4]){{ax1, ay1}, {bx1, by1}, {ex1, ey1}, {dx1, dy1}}, 4, color);

// 在菱形區域外圍畫線，明確界定菱形範圍
gdImageLine(img, ax1, ay1, bx1, by1, color);
gdImageLine(img, bx1, by1, ex1, ey1, color);
gdImageLine(img, ex1, ey1, dx1, dy1, color);
gdImageLine(img, dx1, dy1, ax1, ay1, color);
}
}

void connectPoints(gdImagePtr img, int x1, int y1, int x2, int y2, int color) {
gdImageLine(img, x1, y1, x2, y2, color);
}

</pre>
<p><br/><br/></p>
<p></p>
</div>
<div>\輸出結果:</div>
<div><img alt="" height="533" src="/images/roc_flag_in_gd.png" width="800"/></div>
<div></div>
<div>
<div>------------------------------------------------------------------------------------------------</div>
<div>
<div class="line number1 index0 alt2"></div>
</div>
</div>
<div>2) 承上題, 請列出第二組 ABED 的四條直線與白日中的大圓所相交 (intersect) 的四個點座標.</div>
<div></div>
<div>
<div class="line number1 index0 alt2">
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_roc_flag(gdImagePtr img);
 
// 函數原型
int lineCircleIntersection(int x1, int y1, int x2, int y2, int cx, int cy, int cr, int *x, int *y);
 
int main() {
    int width = 1200;
    int height = (int)(width * 2.0 / 3.0);
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    draw_roc_flag(img);
 
    FILE *outputFile = fopen("roc_flag2.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width / 4);
    int center_y = (int)(height / 4);
 
    red = gdImageColorAllocate(img, 255, 0, 0);
    white = gdImageColorAllocate(img, 255, 255, 255);
    blue = gdImageColorAllocate(img, 0, 0, 149);
 
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);
 
    int A_x = 429;
    int A_y = 125;
    int B_x = 279;
    int B_y = 165;
    int E_x = 170;
    int E_y = 274;
    int D_x = 319;
    int D_y = 234;
 
    // Draw lines
    gdImageLine(img, A_x, A_y, B_x, B_y, white);
    gdImageLine(img, B_x, B_y, E_x, E_y, white);
    gdImageLine(img, E_x, E_y, D_x, D_y, white);
    gdImageLine(img, D_x, D_y, A_x, A_y, white);
 
    // Coordinates of the sun's circle
    int sun_center_x = (int)(width / 4);
    int sun_center_y = (int)(height / 4);
    int sun_radius = (int)(width / 8);
 
    // Draw sun's circle with reduced radius
    int new_sun_radius = sun_radius / 2;
    gdImageFilledEllipse(img, sun_center_x, sun_center_y, new_sun_radius * 2, new_sun_radius * 2, white);
 
    int intersection1_x, intersection1_y;
    int intersection2_x, intersection2_y;
    int intersection3_x, intersection3_y;
    int intersection4_x, intersection4_y;
 
    // Calculate intersections
    lineCircleIntersection(A_x, A_y, B_x, B_y, sun_center_x, sun_center_y, new_sun_radius, &amp;intersection1_x, &amp;intersection1_y);
    lineCircleIntersection(B_x, B_y, E_x, E_y, sun_center_x, sun_center_y, new_sun_radius, &amp;intersection2_x, &amp;intersection2_y);
    lineCircleIntersection(E_x, E_y, D_x, D_y, sun_center_x, sun_center_y, new_sun_radius, &amp;intersection3_x, &amp;intersection3_y);
    lineCircleIntersection(D_x, D_y, A_x, A_y, sun_center_x, sun_center_y, new_sun_radius, &amp;intersection4_x, &amp;intersection4_y);
 
    printf("Intersection 1: (%d, %d)\n", intersection1_x, intersection1_y);
    printf("Intersection 2: (%d, %d)\n", intersection2_x, intersection2_y);
    printf("Intersection 3: (%d, %d)\n", intersection3_x, intersection3_y);
    printf("Intersection 4: (%d, %d)\n", intersection4_x, intersection4_y);
}
 
// 計算直線與圓相交的座標
int lineCircleIntersection(int x1, int y1, int x2, int y2, int cx, int cy, int cr, int *x, int *y) {
    float dx, dy, A, B, C, det, t;
 
    dx = x2 - x1;
    dy = y2 - y1;
 
    A = dx * dx + dy * dy;
    B = 2 * (dx * (x1 - cx) + dy * (y1 - cy));
    C = (x1 - cx) * (x1 - cx) + (y1 - cy) * (y1 - cy) - cr * cr;
 
    det = B * B - 4 * A * C;
 
    if ((A &lt;= 0.00001) || (det &lt; 0)) {
        // No real solutions
        return 0;
    }
 
    t = (-B - sqrt(det)) / (2 * A);
    *x = x1 + t * dx;
    *y = y1 + t * dy;
 
    return 1;</pre>
<p>輸出結果:</p>
<p>Intersection 1: (351, 145)<br/>Intersection 2: (317, 126)<br/>Intersection 3: (247, 253)<br/>Intersection 4: (280, 272)</p>
</div>
<div class="line number1 index0 alt2"><img alt="" height="317" src="/images/roc_flag2.png" width="476"/></div>
</div>
</div>
<h1>w16</h1>
<p><span>請利用 C + gd 繪圖程式庫重新繪製 Figure 1 的質量、彈簧與阻尼器與左右牆面的配置圖.</span></p>
<p><span></span></p>
<h1>課程心得</h1>
<p>這學期學到了如何使用replit來編輯自己的網頁，以及使用replit來執行一些程式碼，replit這個工具讓我們能夠更方便的編輯自己的網頁和跑程式碼，不用像我大一的時候要編輯網頁之前需要進行一些繁瑣的設定，還需要記很多指令，這學期也學到了如何用程式碼來進行繪圖，整體來說課程內容比我大一修課的時候還要更加豐富，工具也更加容易使用，重點是還有chatgpt，在遇到問題的時候也能夠更迅速的找到解決方法。</p>
<p></p>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>